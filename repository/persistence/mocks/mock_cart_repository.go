// Code generated by MockGen. DO NOT EDIT.
// Source: cart_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	entity "interview-telkom-6/entity"
	persistence "interview-telkom-6/repository/persistence"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	sqlx "github.com/jmoiron/sqlx"
)

// MockCartRepository is a mock of CartRepository interface.
type MockCartRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCartRepositoryMockRecorder
}

// MockCartRepositoryMockRecorder is the mock recorder for MockCartRepository.
type MockCartRepositoryMockRecorder struct {
	mock *MockCartRepository
}

// NewMockCartRepository creates a new mock instance.
func NewMockCartRepository(ctrl *gomock.Controller) *MockCartRepository {
	mock := &MockCartRepository{ctrl: ctrl}
	mock.recorder = &MockCartRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCartRepository) EXPECT() *MockCartRepositoryMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockCartRepository) Count(ctx context.Context, builder *persistence.QueryBuilderCriteria) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, builder)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockCartRepositoryMockRecorder) Count(ctx, builder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockCartRepository)(nil).Count), ctx, builder)
}

// Delete mocks base method.
func (m *MockCartRepository) Delete(ctx context.Context, data *entity.Cart) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCartRepositoryMockRecorder) Delete(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCartRepository)(nil).Delete), ctx, data)
}

// Find mocks base method.
func (m *MockCartRepository) Find(ctx context.Context, builder *persistence.QueryBuilderCriteria) ([]entity.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, builder)
	ret0, _ := ret[0].([]entity.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockCartRepositoryMockRecorder) Find(ctx, builder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockCartRepository)(nil).Find), ctx, builder)
}

// Get mocks base method.
func (m *MockCartRepository) Get(ctx context.Context, builder *persistence.QueryBuilderCriteria) (entity.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, builder)
	ret0, _ := ret[0].(entity.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCartRepositoryMockRecorder) Get(ctx, builder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCartRepository)(nil).Get), ctx, builder)
}

// Store mocks base method.
func (m *MockCartRepository) Store(ctx context.Context, data *entity.Cart) (entity.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, data)
	ret0, _ := ret[0].(entity.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Store indicates an expected call of Store.
func (mr *MockCartRepositoryMockRecorder) Store(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockCartRepository)(nil).Store), ctx, data)
}

// Update mocks base method.
func (m *MockCartRepository) Update(ctx context.Context, data *entity.Cart) (entity.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, data)
	ret0, _ := ret[0].(entity.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockCartRepositoryMockRecorder) Update(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCartRepository)(nil).Update), ctx, data)
}

// WithTx mocks base method.
func (m *MockCartRepository) WithTx(conn *sqlx.Tx) persistence.CartRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", conn)
	ret0, _ := ret[0].(persistence.CartRepository)
	return ret0
}

// WithTx indicates an expected call of WithTx.
func (mr *MockCartRepositoryMockRecorder) WithTx(conn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockCartRepository)(nil).WithTx), conn)
}
