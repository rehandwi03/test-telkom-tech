// Code generated by MockGen. DO NOT EDIT.
// Source: cart_product_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	entity "interview-telkom-6/entity"
	persistence "interview-telkom-6/repository/persistence"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	sqlx "github.com/jmoiron/sqlx"
)

// MockCartProductRepository is a mock of CartProductRepository interface.
type MockCartProductRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCartProductRepositoryMockRecorder
}

// MockCartProductRepositoryMockRecorder is the mock recorder for MockCartProductRepository.
type MockCartProductRepositoryMockRecorder struct {
	mock *MockCartProductRepository
}

// NewMockCartProductRepository creates a new mock instance.
func NewMockCartProductRepository(ctrl *gomock.Controller) *MockCartProductRepository {
	mock := &MockCartProductRepository{ctrl: ctrl}
	mock.recorder = &MockCartProductRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCartProductRepository) EXPECT() *MockCartProductRepositoryMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockCartProductRepository) Count(ctx context.Context, builder *persistence.QueryBuilderCriteria) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, builder)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockCartProductRepositoryMockRecorder) Count(ctx, builder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockCartProductRepository)(nil).Count), ctx, builder)
}

// Delete mocks base method.
func (m *MockCartProductRepository) Delete(ctx context.Context, data *entity.CartProduct) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCartProductRepositoryMockRecorder) Delete(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCartProductRepository)(nil).Delete), ctx, data)
}

// Find mocks base method.
func (m *MockCartProductRepository) Find(ctx context.Context, builder *persistence.QueryBuilderCriteria) ([]entity.CartProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, builder)
	ret0, _ := ret[0].([]entity.CartProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockCartProductRepositoryMockRecorder) Find(ctx, builder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockCartProductRepository)(nil).Find), ctx, builder)
}

// Get mocks base method.
func (m *MockCartProductRepository) Get(ctx context.Context, builder *persistence.QueryBuilderCriteria) (entity.CartProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, builder)
	ret0, _ := ret[0].(entity.CartProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCartProductRepositoryMockRecorder) Get(ctx, builder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCartProductRepository)(nil).Get), ctx, builder)
}

// Store mocks base method.
func (m *MockCartProductRepository) Store(ctx context.Context, data *entity.CartProduct) (entity.CartProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, data)
	ret0, _ := ret[0].(entity.CartProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Store indicates an expected call of Store.
func (mr *MockCartProductRepositoryMockRecorder) Store(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockCartProductRepository)(nil).Store), ctx, data)
}

// Update mocks base method.
func (m *MockCartProductRepository) Update(ctx context.Context, data *entity.CartProduct) (entity.CartProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, data)
	ret0, _ := ret[0].(entity.CartProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockCartProductRepositoryMockRecorder) Update(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCartProductRepository)(nil).Update), ctx, data)
}

// WithTx mocks base method.
func (m *MockCartProductRepository) WithTx(conn *sqlx.Tx) persistence.CartProductRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", conn)
	ret0, _ := ret[0].(persistence.CartProductRepository)
	return ret0
}

// WithTx indicates an expected call of WithTx.
func (mr *MockCartProductRepositoryMockRecorder) WithTx(conn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockCartProductRepository)(nil).WithTx), conn)
}
